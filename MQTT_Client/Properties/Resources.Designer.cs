//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MQTT_Client.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MQTT_Client.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на MQTT connected.
        /// </summary>
        internal static string connected_string {
            get {
                return ResourceManager.GetString("connected_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Connecting to MQTT.
        /// </summary>
        internal static string connecting_string {
            get {
                return ResourceManager.GetString("connecting_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Disconnecting from MQTT.
        /// </summary>
        internal static string disconnecting_string {
            get {
                return ResourceManager.GetString("disconnecting_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Empty message.
        /// </summary>
        internal static string empty_message_string {
            get {
                return ResourceManager.GetString("empty_message_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enter the topic name.
        /// </summary>
        internal static string enter_topic_name_string {
            get {
                return ResourceManager.GetString("enter_topic_name_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Firebase reference cannot be is empty.
        /// </summary>
        internal static string error_fb_ref {
            get {
                return ResourceManager.GetString("error_fb_ref", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error!.
        /// </summary>
        internal static string error_string {
            get {
                return ResourceManager.GetString("error_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Topic path cannot be is empty.
        /// </summary>
        internal static string error_topic_path {
            get {
                return ResourceManager.GetString("error_topic_path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap firebase {
            get {
                object obj = ResourceManager.GetObject("firebase", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap firestore {
            get {
                object obj = ResourceManager.GetObject("firestore", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap green {
            get {
                object obj = ResourceManager.GetObject("green", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap iconMQTT {
            get {
                object obj = ResourceManager.GetObject("iconMQTT", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Icon, аналогичного (Значок).
        /// </summary>
        internal static System.Drawing.Icon iconMQTT_ico {
            get {
                object obj = ResourceManager.GetObject("iconMQTT_ico", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Not connected to MQTT.
        /// </summary>
        internal static string not_connected_string {
            get {
                return ResourceManager.GetString("not_connected_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Message recived: .
        /// </summary>
        internal static string notification_string {
            get {
                return ResourceManager.GetString("notification_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на MQTT Reciver for Firebase is ready.
        /// </summary>
        internal static string ready_mqtt_firebase {
            get {
                return ResourceManager.GetString("ready_mqtt_firebase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на MQTT Reciver for Firestore is ready.
        /// </summary>
        internal static string ready_mqtt_firestore {
            get {
                return ResourceManager.GetString("ready_mqtt_firestore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reconnecting.
        /// </summary>
        internal static string reconnect_string {
            get {
                return ResourceManager.GetString("reconnect_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap red {
            get {
                object obj = ResourceManager.GetObject("red", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Subscribe on topic: .
        /// </summary>
        internal static string subscribe_topic_string {
            get {
                return ResourceManager.GetString("subscribe_topic_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Topic adding.
        /// </summary>
        internal static string topic_adding_string {
            get {
                return ResourceManager.GetString("topic_adding_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The topic is not selected.
        /// </summary>
        internal static string topic_not_selected {
            get {
                return ResourceManager.GetString("topic_not_selected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Topic: .
        /// </summary>
        internal static string topic_string {
            get {
                return ResourceManager.GetString("topic_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Warning!.
        /// </summary>
        internal static string warning_string {
            get {
                return ResourceManager.GetString("warning_string", resourceCulture);
            }
        }
    }
}
